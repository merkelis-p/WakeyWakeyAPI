// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WakeyWakeyAPI.Models;

namespace WakeyWakeyAPI.Migrations
{
    [DbContext(typeof(wakeyContext))]
    [Migration("20231215010846_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.17");

            modelBuilder.Entity("WakeyWakeyAPI.Models.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .HasMaxLength(5000)
                        .HasColumnType("varchar(5000)")
                        .HasColumnName("description");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime")
                        .HasColumnName("end_date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.Property<int?>("Score")
                        .HasColumnType("int(11)")
                        .HasColumnName("score");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime")
                        .HasColumnName("start_date");

                    b.Property<int>("Status")
                        .HasColumnType("int(11)")
                        .HasColumnName("status");

                    b.Property<int>("UserId")
                        .HasColumnType("int(11)")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "UserId" }, "user_id");

                    b.ToTable("course");
                });

            modelBuilder.Entity("WakeyWakeyAPI.Models.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .HasMaxLength(5000)
                        .HasColumnType("varchar(5000)")
                        .HasColumnName("description");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime")
                        .HasColumnName("end_date");

                    b.Property<string>("Location")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("location");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.Property<int?>("Recurring")
                        .HasColumnType("int(11)")
                        .HasColumnName("recurring");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime")
                        .HasColumnName("start_date");

                    b.Property<int>("UserId")
                        .HasColumnType("int(11)")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "UserId" }, "user_id")
                        .HasDatabaseName("user_id1");

                    b.ToTable("event");
                });

            modelBuilder.Entity("WakeyWakeyAPI.Models.Record", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("BreakDuration")
                        .HasColumnType("int");

                    b.Property<int?>("BreakFrequency")
                        .HasColumnType("int");

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<int?>("Duration")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("FocusDuration")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("TaskId")
                        .HasColumnType("int(11)");

                    b.Property<int>("UserId")
                        .HasColumnType("int(11)");

                    b.HasKey("Id");

                    b.HasIndex("TaskId");

                    b.HasIndex("UserId");

                    b.ToTable("Records");
                });

            modelBuilder.Entity("WakeyWakeyAPI.Models.Reminder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    b.Property<int>("EventId")
                        .HasColumnType("int(11)")
                        .HasColumnName("event_id");

                    b.Property<DateTime>("ReminderDate")
                        .HasColumnType("datetime")
                        .HasColumnName("reminder_date");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "EventId" }, "event_id");

                    b.ToTable("reminder");
                });

            modelBuilder.Entity("WakeyWakeyAPI.Models.Subject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    b.Property<int>("CourseId")
                        .HasColumnType("int(11)")
                        .HasColumnName("course_id");

                    b.Property<string>("Description")
                        .HasMaxLength(5000)
                        .HasColumnType("varchar(5000)")
                        .HasColumnName("description");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime")
                        .HasColumnName("end_date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.Property<int?>("Score")
                        .HasColumnType("int(11)")
                        .HasColumnName("score");

                    b.Property<int?>("ScoreWeight")
                        .HasColumnType("int(11)")
                        .HasColumnName("score_weight");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime")
                        .HasColumnName("start_date");

                    b.Property<int>("Status")
                        .HasColumnType("int(11)")
                        .HasColumnName("status");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "CourseId" }, "course_id");

                    b.ToTable("subject");
                });

            modelBuilder.Entity("WakeyWakeyAPI.Models.Task", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    b.Property<int>("Category")
                        .HasColumnType("int(11)")
                        .HasColumnName("category");

                    b.Property<DateTime?>("DeadlineDate")
                        .HasColumnType("datetime")
                        .HasColumnName("deadline_date");

                    b.Property<string>("Description")
                        .HasMaxLength(5000)
                        .HasColumnType("varchar(5000)")
                        .HasColumnName("description");

                    b.Property<int?>("EstimatedDuration")
                        .HasColumnType("int(11)")
                        .HasColumnName("estimated_duration");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.Property<int?>("OverallDuration")
                        .HasColumnType("int(11)")
                        .HasColumnName("overall_duration");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int(11)")
                        .HasColumnName("parent_id");

                    b.Property<int?>("ParentTaskId")
                        .HasColumnType("int(11)");

                    b.Property<int?>("Score")
                        .HasColumnType("int(11)")
                        .HasColumnName("score");

                    b.Property<int?>("ScoreWeight")
                        .HasColumnType("int(11)")
                        .HasColumnName("score_weight");

                    b.Property<int>("Status")
                        .HasColumnType("int(11)")
                        .HasColumnName("status");

                    b.Property<int?>("SubjectId")
                        .HasColumnType("int(11)")
                        .HasColumnName("subject_id");

                    b.Property<int>("UserId")
                        .HasColumnType("int(11)")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("ParentTaskId");

                    b.HasIndex(new[] { "SubjectId" }, "subject_id");

                    b.HasIndex(new[] { "UserId" }, "user_id")
                        .HasDatabaseName("user_id2");

                    b.ToTable("task");
                });

            modelBuilder.Entity("WakeyWakeyAPI.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("email");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("password");

                    b.Property<string>("Salt")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("salt");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("username");

                    b.HasKey("Id");

                    b.ToTable("user");
                });

            modelBuilder.Entity("WakeyWakeyAPI.Models.Course", b =>
                {
                    b.HasOne("WakeyWakeyAPI.Models.User", "User")
                        .WithMany("Courses")
                        .HasForeignKey("UserId")
                        .HasConstraintName("course_ibfk_1")
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("WakeyWakeyAPI.Models.Event", b =>
                {
                    b.HasOne("WakeyWakeyAPI.Models.User", "User")
                        .WithMany("Events")
                        .HasForeignKey("UserId")
                        .HasConstraintName("event_ibfk_1")
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("WakeyWakeyAPI.Models.Record", b =>
                {
                    b.HasOne("WakeyWakeyAPI.Models.Task", "Task")
                        .WithMany("Records")
                        .HasForeignKey("TaskId");

                    b.HasOne("WakeyWakeyAPI.Models.User", "User")
                        .WithMany("Records")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Task");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WakeyWakeyAPI.Models.Reminder", b =>
                {
                    b.HasOne("WakeyWakeyAPI.Models.Event", "Event")
                        .WithMany("Reminders")
                        .HasForeignKey("EventId")
                        .HasConstraintName("reminder_ibfk_1")
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("WakeyWakeyAPI.Models.Subject", b =>
                {
                    b.HasOne("WakeyWakeyAPI.Models.Course", "Course")
                        .WithMany("Subjects")
                        .HasForeignKey("CourseId")
                        .HasConstraintName("subject_ibfk_1")
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("WakeyWakeyAPI.Models.Task", b =>
                {
                    b.HasOne("WakeyWakeyAPI.Models.Task", "ParentTask")
                        .WithMany("SubTasks")
                        .HasForeignKey("ParentTaskId");

                    b.HasOne("WakeyWakeyAPI.Models.Subject", "Subject")
                        .WithMany("Tasks")
                        .HasForeignKey("SubjectId")
                        .HasConstraintName("task_ibfk_1");

                    b.HasOne("WakeyWakeyAPI.Models.User", "User")
                        .WithMany("Tasks")
                        .HasForeignKey("UserId")
                        .HasConstraintName("task_ibfk_2")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ParentTask");

                    b.Navigation("Subject");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WakeyWakeyAPI.Models.Course", b =>
                {
                    b.Navigation("Subjects");
                });

            modelBuilder.Entity("WakeyWakeyAPI.Models.Event", b =>
                {
                    b.Navigation("Reminders");
                });

            modelBuilder.Entity("WakeyWakeyAPI.Models.Subject", b =>
                {
                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("WakeyWakeyAPI.Models.Task", b =>
                {
                    b.Navigation("Records");

                    b.Navigation("SubTasks");
                });

            modelBuilder.Entity("WakeyWakeyAPI.Models.User", b =>
                {
                    b.Navigation("Courses");

                    b.Navigation("Events");

                    b.Navigation("Records");

                    b.Navigation("Tasks");
                });
#pragma warning restore 612, 618
        }
    }
}
